{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041C\\u043E\\u0438 \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\\\\\\u042F \\u0443 \\u043C\\u0430\\u043C\\u044B \\u043F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u043C\\u0438\\u0441\\u0442\\\\my-app\\\\src\\\\pages\\\\review\\\\Review.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n// import ReactDOM from 'react-dom/client';\nimport AddPost from './components/addPost';\nimport Post from './components/Post';\nimport './Review.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Review({\n  inputText\n}) {\n  _s();\n  // const [messages, setMessages] = useState([]); \n  // const [inputText, setInputText] = useState(''); \n\n  // const handleKeyPress = (event) => { \n  //   if (event.key === 'Enter') { \n  //     sendMessage(); \n  //   } \n  // }; \n  // const sendMessage = () => { \n  //   if (inputText !== '') { \n  //     setMessages([...messages, inputText]); \n  //     setInputText(''); \n  //   } \n  // }; \n\n  // const [posts, setPosts] = useState([]);\n\n  // const fetchPosts = () => {\n  //   fetch(\"http://localhost:3000/api/review\")\n  //     .then((response) => response.json())\n  //     .then((data) => setPosts(data.data))\n  // }\n\n  // useEffect(() => {\n  //   fetchPosts()\n  // }, []);\n\n  // const addPost = (login, review) => {\n  //   fetch('http://localhost:3000/api/review', {\n  //     method: 'POST',\n  //     body: JSON.stringify({\n  //       username: login,\n  //       userreview: review\n  //       // userId: Math.random().toString(36).slice(2),\n  //     }),\n  //     headers: {\n  //       'Content-type': 'application/json; charset=UTF-8',\n  //     },\n  //   })\n  //     .then((response) => response.json())\n\n  // };\n\n  // const deletePost = (id) => {\n  //   fetch(`http://localhost:3000/api/review/${id}`, {\n  //     method: 'DELETE'\n  //   })\n  //     .then((response) => {\n  //       if (response.status === 200) {\n  //         setPosts(\n  //           postsReviews.filter((postsReview) => {\n  //             return postsReview.id !== id;\n  //           })\n  //         )\n  //       }\n  //     })\n  // };\n\n  const [postsReviews, setPostsReviews] = useState([]);\n  // const handleAddReview = (review) => {\n  //   setPostsReviews((prevReviews) => [review, ...prevReviews])\n  // }\n\n  // useEffect(() => {\n  //   axios\n  //     .get('http://localhost:3000/api/review')\n  //     // .then((response) => response.json())\n  //     .then(data => {\n  //       setPostsReviews(data.data);\n  //       console.log(data.data)\n  //     })\n  // }, [])\n\n  const [inputValueReview, setInputValueReview] = useState('');\n  const handleInputChangeReview = event => {\n    setInputValueReview(event.target.value);\n  };\n  const handleSubmitReview = event => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      // console.log(inputValueReview)\n      sendDataToServerReview();\n      // useEffect(() => {}\n      getValueReview();\n      setInputValueReview('');\n    }\n  };\n  const sendDataToServerReview = () => {\n    fetch('http://localhost:3000/api/review', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        review: inputValueReview,\n        login: inputText\n      })\n    }).then(response => response.json())\n    // .then((review) => {\n    //   setPostsReviews((prevPosts) => [review, ...prevPosts])\n    // })\n    // .then((data) => {\n    //   setPostsReviews((prevPosts)=> [data.data, ...prevPosts]);\n    // })\n    .catch(error => {\n      console.error('Ошибка:', error);\n    });\n  };\n  function getValueReview() {\n    // useEffect(() => {\n    axios.get('http://localhost:3000/api/review')\n    // .then((response) => response.json())\n    .then(response => {\n      const reversedMessages = response.data.reverse();\n      setPostsReviews(reversedMessages);\n      // setPostsReviews(reversedMessages)\n      // setPostsReviews((prevPosts)=> [(data.data), ...prevPosts]);\n      // setPostsReviews(data.data);\n      // const ptr = data.data\n      // setPostsReviews((prevPosts) => [ptr, ...prevPosts])\n\n      // const handleAddReview = (inputValueRev) => {\n      //   setPostsReviews((prevPosts) => [inputValueRev, ...prevPosts])\n      // }\n      // handleAddReview()\n      // \n      console.log(reversedMessages);\n    });\n    // }, [])\n  }\n\n  useEffect(() => {\n    getValueReview();\n    // handleAddReview()\n    // console.log(postsReviews)\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"review_wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(AddPost\n      // addPost={addPost} \n      , {\n        inputValueReview: inputValueReview,\n        handleInputChangeReview: handleInputChangeReview,\n        handleSubmitReview: handleSubmitReview\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"posts-container\",\n        children: /*#__PURE__*/_jsxDEV(Post, {\n          postsReviews: postsReviews\n\n          // inputText={inputText}\n          // key={postsReview.id}\n          // id={postsReviews.id}\n          //   title={post.title}\n          //   body={post.body}\n          // deletePost={deletePost}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n_s(Review, \"hjoLFl+WDlhPKVbxY7No3vyZlRk=\");\n_c = Review;\n;\n// это строчка я хз за что отвечает но она мешает и зачем то добовляет блок который все портит\n// ReactDOM.createRoot(document.getElementById('root')).render(<Review />);\nexport default Review;\nvar _c;\n$RefreshReg$(_c, \"Review\");","map":{"version":3,"names":["useState","useEffect","AddPost","Post","axios","jsxDEV","_jsxDEV","Review","inputText","_s","postsReviews","setPostsReviews","inputValueReview","setInputValueReview","handleInputChangeReview","event","target","value","handleSubmitReview","key","preventDefault","sendDataToServerReview","getValueReview","fetch","method","headers","body","JSON","stringify","review","login","then","response","json","catch","error","console","get","reversedMessages","data","reverse","log","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Мои проекты/Я у мамы программист/my-app/src/pages/review/Review.jsx"],"sourcesContent":["\r\nimport { useState, useEffect } from 'react';\r\n// import ReactDOM from 'react-dom/client';\r\nimport AddPost from './components/addPost';\r\nimport Post from './components/Post';\r\nimport './Review.css';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction Review({ inputText }) {\r\n\r\n  // const [messages, setMessages] = useState([]); \r\n  // const [inputText, setInputText] = useState(''); \r\n\r\n  // const handleKeyPress = (event) => { \r\n  //   if (event.key === 'Enter') { \r\n  //     sendMessage(); \r\n  //   } \r\n  // }; \r\n  // const sendMessage = () => { \r\n  //   if (inputText !== '') { \r\n  //     setMessages([...messages, inputText]); \r\n  //     setInputText(''); \r\n  //   } \r\n  // }; \r\n\r\n\r\n\r\n  // const [posts, setPosts] = useState([]);\r\n\r\n  // const fetchPosts = () => {\r\n  //   fetch(\"http://localhost:3000/api/review\")\r\n  //     .then((response) => response.json())\r\n  //     .then((data) => setPosts(data.data))\r\n  // }\r\n\r\n  // useEffect(() => {\r\n  //   fetchPosts()\r\n  // }, []);\r\n\r\n  // const addPost = (login, review) => {\r\n  //   fetch('http://localhost:3000/api/review', {\r\n  //     method: 'POST',\r\n  //     body: JSON.stringify({\r\n  //       username: login,\r\n  //       userreview: review\r\n  //       // userId: Math.random().toString(36).slice(2),\r\n  //     }),\r\n  //     headers: {\r\n  //       'Content-type': 'application/json; charset=UTF-8',\r\n  //     },\r\n  //   })\r\n  //     .then((response) => response.json())\r\n\r\n  // };\r\n\r\n  // const deletePost = (id) => {\r\n  //   fetch(`http://localhost:3000/api/review/${id}`, {\r\n  //     method: 'DELETE'\r\n  //   })\r\n  //     .then((response) => {\r\n  //       if (response.status === 200) {\r\n  //         setPosts(\r\n  //           postsReviews.filter((postsReview) => {\r\n  //             return postsReview.id !== id;\r\n  //           })\r\n  //         )\r\n  //       }\r\n  //     })\r\n  // };\r\n\r\n\r\n  const [postsReviews, setPostsReviews] = useState([]);\r\n  // const handleAddReview = (review) => {\r\n  //   setPostsReviews((prevReviews) => [review, ...prevReviews])\r\n  // }\r\n\r\n  // useEffect(() => {\r\n  //   axios\r\n  //     .get('http://localhost:3000/api/review')\r\n  //     // .then((response) => response.json())\r\n  //     .then(data => {\r\n  //       setPostsReviews(data.data);\r\n  //       console.log(data.data)\r\n  //     })\r\n  // }, [])\r\n\r\n\r\n  const [inputValueReview, setInputValueReview] = useState('');\r\n\r\n  const handleInputChangeReview = (event) => {\r\n    setInputValueReview(event.target.value);\r\n    \r\n  };\r\n  const handleSubmitReview = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      // console.log(inputValueReview)\r\n      sendDataToServerReview();\r\n      // useEffect(() => {}\r\n      getValueReview()\r\n      setInputValueReview('');\r\n\r\n\r\n    }\r\n\r\n  };\r\n  const sendDataToServerReview = () => {\r\n    fetch('http://localhost:3000/api/review', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ review: inputValueReview, login: inputText }),\r\n\r\n    })\r\n      .then((response) => response.json())\r\n      // .then((review) => {\r\n      //   setPostsReviews((prevPosts) => [review, ...prevPosts])\r\n      // })\r\n      // .then((data) => {\r\n      //   setPostsReviews((prevPosts)=> [data.data, ...prevPosts]);\r\n      // })\r\n      \r\n\r\n      .catch((error) => {\r\n        console.error('Ошибка:', error);\r\n      });\r\n\r\n\r\n  };\r\n  function getValueReview() {\r\n      // useEffect(() => {\r\n    axios\r\n      .get('http://localhost:3000/api/review')\r\n      // .then((response) => response.json())\r\n      .then((response) => {\r\n        const reversedMessages = response.data.reverse();\r\n        setPostsReviews(reversedMessages)\r\n        // setPostsReviews(reversedMessages)\r\n        // setPostsReviews((prevPosts)=> [(data.data), ...prevPosts]);\r\n        // setPostsReviews(data.data);\r\n        // const ptr = data.data\r\n                  // setPostsReviews((prevPosts) => [ptr, ...prevPosts])\r\n\r\n        // const handleAddReview = (inputValueRev) => {\r\n        //   setPostsReviews((prevPosts) => [inputValueRev, ...prevPosts])\r\n        // }\r\n        // handleAddReview()\r\n        // \r\n        console.log(reversedMessages)\r\n\r\n      })\r\n  // }, [])\r\n  }\r\n  useEffect(() => {\r\n    getValueReview();\r\n    // handleAddReview()\r\n    // console.log(postsReviews)\r\n\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <main>\r\n      <div className='review_wrapper'>\r\n        <AddPost\r\n          // addPost={addPost} \r\n          inputValueReview={inputValueReview}\r\n          handleInputChangeReview={handleInputChangeReview}\r\n          handleSubmitReview={handleSubmitReview}\r\n        />\r\n        <section className=\"posts-container\">\r\n          {/* {postsReviews.map((postsReview) => */}\r\n          <Post\r\n            postsReviews={postsReviews}\r\n\r\n            // inputText={inputText}\r\n            // key={postsReview.id}\r\n            // id={postsReviews.id}\r\n            //   title={post.title}\r\n            //   body={post.body}\r\n            // deletePost={deletePost}\r\n          />\r\n          {/* )} */}\r\n        </section>\r\n      </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      {/*<div className='cont_review_wrapper'> \r\n        <div className=\"review_wrapper\"> \r\n          <div className=\"input-area\"> \r\n            <input className='review_input' type=\"text\" value={inputText} onChange={(event) => setInputText(event.target.value)} onKeyPress={handleKeyPress} placeholder='Оставить отзыв' /> \r\n            <button className='btn_review' onClick={sendMessage}>Отправить</button> \r\n          </div> \r\n          <div className=\"chat-window\"> \r\n            {messages.map((message, index) => ( \r\n \r\n              <div key={index} className=\"message\"> \r\n                <p className='review_text'>{message} </p> \r\n              </div> \r\n            ))} \r\n          </div> \r\n \r\n            </div>  \r\n \r\n      </div>  */}\r\n    </main>\r\n  );\r\n};\r\n// это строчка я хз за что отвечает но она мешает и зачем то добовляет блок который все портит\r\n// ReactDOM.createRoot(document.getElementById('root')).render(<Review />);\r\nexport default Review;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}